{"name":"PySBOL","tagline":"","body":"pySBOL: Python wrapper for libSBOLc\r\n======================================\r\n\r\n[pySBOL](https://github.com/SynBioDex/pySBOL) is a wrapper around [libSBOLc](https://github.com/SynBioDex/libSBOLc), the C library for the [Synthetic Biology Open Language (SBOL)](http://www.sbolstandard.org/).\r\n\r\nGetting Started\r\n---------------\r\n\r\nTo use SBOL in your own code, copy the <code>sbol</code> folder somewhere on your <code>PYTHONPATH</code>. Then you can start writing:\r\n\r\n    import sbol\r\n    \r\n    # create document\r\n    doc = sbol.Document()\r\n\r\n    # create components\r\n    dc1 = sbol.DNAComponent(doc, 'http://example.com/dc1')\r\n    dc2 = sbol.DNAComponent(doc, 'http://example.com/dc2')\r\n    dc1.display_id = 'DC1'\r\n    dc2.display_id = 'DC2'\r\n    dc1.name = 'DnaComponent1'\r\n    dc2.name = 'DnaComponent2'\r\n    dc1.description = 'DnaComponent with one sequence annotation'\r\n    dc2.description = 'Another DNA component'\r\n    \r\n    # add seqeuence\r\n    ds1 = sbol.DNASequence(doc, 'http://example.com/ds1')\r\n    ds1.nucleotides = 'tccctatcagtgat'\r\n    dc1.sequence = ds1\r\n\r\n    # add annotation\r\n    sa1 = sbol.SequenceAnnotation(doc, 'http://example.com/sa1')\r\n    sa1.subcomponent = dc2\r\n    dc1.annotations += sa1\r\n\r\n    # write to file\r\n    doc.write('valid04_dna_component_annotation.xml')\r\n\r\nNote: if you try to <code>import sbol</code> and the interpreter crashes with an error like \"Py_GetThreadedState...\", you're probably using the wrong Python version. libSBOLpy currently works with Python 2.6 and 2.7.\r\n\r\nYou can also access the low-level wrapper directly:\r\n\r\n    from sbol import libsbol\r\n\r\nThat could be useful for prototyping C algorithms in the Python interpreter.\r\n\r\nUnit tests\r\n----------\r\n\r\nYou can run <code>python sbol/sbol_test.py</code> to verify that everything is working.\r\n\r\nBut a word of caution! The tests aren't comprehensive--in fact, they just test getting and setting each property of each of the SBOL core objects. Please report anything weird that happens while using the module! It's not always straightforward getting the Python garbage collector to free the right pointers at the right times, and fairly \"minor\" bugs in memory management can crash the interpreter.\r\n\r\nDevelopment\r\n-----------\r\n\r\nHere's a quick breakdown of the source files:\r\n\r\n* \\_\\_init\\_\\_.py is a one-liner.\r\n\r\n* \\_libsbol.so and libsbol.py are generated by SWIG as part of a libSBOLc build. They shouldn't be modified directly. If you do need to change something, make the changes in libSBOLc and copy over the updated files.\r\n\r\n* sbol.py is a high-level wrapper around the SWIG wrapper. It defines proxy objects that behave (more or less) pythonically, but actually do everything with calls to libsbol.py.\r\n\r\n* sbol\\_test.py contains the unit tests.\r\n\r\nIf you come across something that needs to be changed in the C code, see \"Updating the Python wrapper\" in the [libSBOLc documentation](http://synbiodex.github.com/libSBOLc/#swig). It's actually pretty quick--that is, once you've checked out libSBOLc and installed CMake and SWIG.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}